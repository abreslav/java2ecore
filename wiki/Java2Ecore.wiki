#summary Introduction to the project
= What is Java2Ecore? =

Java2Ecore is a translator from a subset of Java language to [http://www.eclipse.org/emf EMF Ecore]. 

Tha main idea is that you can simply define some classes in Java and they will be transformed to an Ecore model.

= Example =
Let's have a look at the simplest example from Eclipse Help, [http://help.eclipse.org/help32/index.jsp?topic=/org.eclipse.emf.doc/tutorials/clibmod/clibmod.html A Library]: 

http://help.eclipse.org/help32/topic/org.eclipse.emf.doc/tutorials/clibmod/images/model.gif 
{{{
@EPackage(
	nsPrefix = "library", 
	nsURI = "http:///example.com/library"
)
public class library {}

class Library {
	String name;
	List<Writer> writers;
	List<Book> books;
}

class Writer {
	String name;
	List<Book> books;
}

class Book {
	String title;
	Writer author;
	int pages = 100;
	BookCategory category;
}

enum BookCategory {
	Mystery,
	ScienceFiction,
	Biography
}
}}}
If you like it even a little bit, please, proceed to [Syntax] page. :)

= Advantages =

  * *Eclipse Java editor* is used for entering your code, this gives you all of it's features: type checking, code completion, outline an so on
  * *Full support for generics* - actually at first this was the main goal. All the generic-related things supported both in Java and EMF anre supported by Java2Ecore.
  * *Clear syntax* - most constructs are expressed in very natural manner. But, unfortunately, there are some exceptions.

= Disadvantages =

  * Java2Ecore uses *JDT DOM* and thus can hardly work out of Eclipse
  * Some Ecore notions cannot be expressed in Java
  * Some syntax is ugly

= See also =
 * [Syntax] description
 * User manual for [Integration Eclipse integration] installation and use
 * [Problems], unsupported and not implemented features